openapi: 3.1.0
info: 
  title: The Bookshelf API
  version: "1.0"
  summary: An API to keep track of Books
  description: This is an API for keeping track of books
  license: 
    name: MIT
    url: https://opensource.org/licenses/MIT
servers: 
  - url: http://api.bookshelf.com
    description: The Production Server
  - url: http://playground.api.bookshelf.com 
    description: The test server where you can play around
tags: 
  - name: books
    description: Operations on books
security:
  - GlobalSecurity: []
paths:
  /books:
    get:
      operationId: listBooks
      summary: List all books
      tags: 
        - public
      security: []
      responses: 
        "200":
          description: OK
          content: 
            application/json: 
              schema: 
                type: array
                items:
                  type: object
                  properties:
                    bookId:
                      type: string
                    name:
                      type: string
                    releaseDate:
                      type: string
                      format: date
        "400":
          description: Bad Request
    post:
      operationId: addBook
      summary: Add a new book
      tags: 
        - books
      security:
        - ApiKeySecurity: []
        - GlobalSecurity: []
      requestBody: 
        $ref: "#/components/requestBodies/BookRequest"
      responses: 
        "201":
          description: Created
          headers:
            Location:
              schema: 
                $ref: "#/components/schemas/Location"
          links:
            GetBook:
              operationId: getBookInfo
              parameters:
                url: $response.header.location
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "409":
          description: Conflict
  /books/{bookId}:
    parameters: 
      - name: bookId
        in: path
        schema: 
          type: string
        required: true
    get:
      operationId: getBookInfo
      summary: Retrieve info about a book
      tags: 
        - books
      security: 
        - OAuthSecurity:
          - books:read
        - GlobalSecurity: []
      parameters: 
        - name: fetchAuthor
          in: query
          schema: 
            type: boolean
          required: false
        - name: Accept-Language
          in: header
          schema: 
            type: string
          required: false
        - name: SessionId
          in: cookie
          schema: 
            type: string
      responses: 
        "200":
          description: OK
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/Book"
        "401":
          description: OAuth2 Security failed
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          $ref: "#/components/responses/BookNotFound"
    delete: 
      operationId: removeBook
      summary: Removes a Book
      description: "~Removes~ the info about **a book** and all *related data* `permanently`"
      tags: 
        - books
      security: 
        - OidcSecurity: []
      responses: 
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/BookNotFound"
    put:
      operationId: updateBook
      summary: Update a Book
      tags: 
        - books
      security: 
        - MutualTlsSecurity: []
      requestBody: 
        $ref: "#/components/requestBodies/BookRequest"
        description: Book update request
      responses: 
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/BookNotFound"
  /books/upload-cover:
    servers: 
      - url: https://storage-eu.bookshelf.com
        description: The Storage Backend
    post: 
      operationId: uploadCover
      summary: Upload a book cover to the storage
      tags: 
        - books
      requestBody: 
        content:
          img/png:
            schema: 
              type: string
              contentEncoding: base64
          multipart/form-data:
            schema: 
              type: object
              properties:
                file:
                  type: string
                  contentEncoding: base64
                bookId:
                  type: string
                editionNumber:
                  type: string
                successUrl:
                  type: string
                  format: uri
                failedUrl:
                  type: string
                  format: uri
      responses: 
        "200":
          description: Upload request complete
        "400":
          description: Bad Request
        "522":
          description: Timeout
        "401":
          description: OAuth2 Security failed
          $ref: '#/components/responses/UnauthorizedResponse' 
      callbacks:
        uploadFinished:
          $request.body#/successUrl:
            get: 
              operationId: uploadSuccess
              summary: Callback for a successful book cover upload
              security: 
                - GlobalSecurity: []
              parameters: 
                - name: Location
                  in: header
                  schema:
                    $ref: "#/components/schemas/Location"
        uploadFailed:
          $request.body#/failedUrl:
            post:
              operationId: uploadFailed
              summary: Callback for a failed book cover upload
              requestBody: 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                        error:
                          type: string
                          enum:
                            - max_size_exceeded
                        errorDescription:
                          type: string
components: 
  schemas:
    Book:
      type: object
      properties:
        name:
          minLength: 2
          maxLength: 100
          type: string
        releaseDate:
          type: string
          format: date
        category:
          type: string
          enum:
            - ROMANCE
            - FICTION
            - TECHNICAL
            - HISTORY
            - SCIENCE FICTION
        translatedLanguages:
          type: array
          minItems: 1
          maxItems: 7200
          uniqueItems: true
          pattern: "[a-z]{2}-[A-Z]{2}"
          examples:
            - en-US
            - fr-BE
            - de-LU
          items: 
            type: string
        editionNumber:
          minimum: 1
          type: integer
        author:
          type: object
          properties:
            authorId:
              type: string
              format: uuid
            name:
              type: string
              default: John Doe
            email:
              type: string
              format: email
            website:
              type: string
              format: uri
          required: 
            -  authorId
        price:
          format: double
          type: number
        hardcoverEdition:
          type: boolean
      required: 
        - name
        - releaseDate
    Location:
      type: string
      format: uri
  headers:
    UnauthorizedHeader:
      schema: 
        type: string
        enum:
          - Basic
          - Bearer
  responses:
    BookNotFound:
      description: Book not found
    UnauthorizedResponse:
      description: HTTP Security failed
      headers:
        WWW-Authenticate:
          $ref: "#/components/headers/UnauthorizedHeader"
  requestBodies:
    BookRequest:
      description: Book request
      content: 
        application/json: 
          schema: 
            $ref: "#/components/schemas/Book"
  securitySchemes:
    GlobalSecurity:
      type: http
      description: Global security for all the endpoints
      scheme: Basic
    ApiKeySecurity:
      type: apiKey
      name: Api-Key
      in: header
    OAuthSecurity:
      type: oauth2
      flows: 
        authorizationCode: 
          authorizationUrl: https://auth.bookshelf.com/authorize
          tokenUrl: https://auth.bookshelf.com/access_token
          scopes:
            books:read: Operations on books that do not change the bookshelf
            books:write: Operations on books to make changes to the bookshelf
    OidcSecurity:
      type: openIdConnect
      openIdConnectUrl: https://auth.bookshelf.com
    MutualTlsSecurity:
      type: mutualTLS
      description: the client present a valid certificate